# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import json
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem, QMessageBox

from data import *
from PyQt5.QtCore import Qt,QThread,pyqtSignal
from functools import partial
from fitbit_Account import generate_year_of_birth,generate_Japanese_name,generate_pounds,generate_centimeters,main_account_creation,generate_password,generate_English_name
from fitbit_Form import generate_japanese_address,generate_japanese_phone_number,main_fill_form




class FunctionThread(QThread):
    # Define a signal to emit the result
    result = pyqtSignal(object)

    def __init__(self, function, *args, **kwargs):
        QThread.__init__(self)
        self.function = function
        self.args = args
        self.kwargs = kwargs

    def run(self):
        result = self.function(*self.args, **self.kwargs)
        self.result.emit(result)
        


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        
    def setupUi(self):
        self.threads = []
        # opening data if it exists when loading gui
        
        # 
        self.setObjectName("self")
        self.resize(1074, 757)
        self.setAcceptDrops(False)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(-1, -1, 1041, 701))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabwidget = QtWidgets.QTabWidget(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.tabwidget.setFont(font)
        self.tabwidget.setObjectName("tabwidget")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.table1 = QtWidgets.QTableWidget(self.tab_1)
        self.table1.setGeometry(QtCore.QRect(0, 60, 461, 471))
        self.table1.setColumnCount(2)
        self.table1.setObjectName("table1")
        self.table1.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(1, item)
        self.country = QtWidgets.QComboBox(self.tab_1)
        self.country.setGeometry(QtCore.QRect(680, 60, 231, 31))
        self.country.setObjectName("country")
        self.country.addItem("")
        self.country.addItem("")
        self.country.addItem("")
        self.insert = QtWidgets.QPushButton(self.tab_1)
        self.insert.setGeometry(QtCore.QRect(490, 150, 111, 61))
        self.insert.setObjectName("insert")
        self.delete_2 = QtWidgets.QPushButton(self.tab_1)
        self.delete_2.setGeometry(QtCore.QRect(490, 270, 111, 61))
        self.delete_2.setObjectName("delete_2")
        self.load = QtWidgets.QPushButton(self.tab_1)
        self.load.setGeometry(QtCore.QRect(490, 390, 111, 61))
        self.load.setObjectName("load")
        self.progressBar_1 = QtWidgets.QProgressBar(self.tab_1)
        self.progressBar_1.setGeometry(QtCore.QRect(780, 500, 131, 31))
        self.progressBar_1.setProperty("value", 0)
        self.progressBar_1.setObjectName("progressBar_1")
        self.label_21 = QtWidgets.QLabel(self.tab_1)
        self.label_21.setGeometry(QtCore.QRect(680, 500, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.submit1 = QtWidgets.QPushButton(self.tab_1)
        self.submit1.setGeometry(QtCore.QRect(430, 610, 151, 41))
        self.submit1.setAutoDefault(False)
        self.submit1.setDefault(True)
        self.submit1.setFlat(False)
        self.submit1.setObjectName("submit1")
        self.layoutWidget = QtWidgets.QWidget(self.tab_1)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 10, 991, 32))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.label_33 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_33.setFont(font)
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.horizontalLayout_2.addWidget(self.label_33)
        self.ch9 = QtWidgets.QCheckBox(self.tab_1)
        self.ch9.setGeometry(QtCore.QRect(1010, 220, 21, 41))
        self.ch9.setText("")
        self.ch9.setObjectName("ch9")
        self.label_22 = QtWidgets.QLabel(self.tab_1)
        self.label_22.setGeometry(QtCore.QRect(680, 230, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.firstName_2 = QtWidgets.QTextEdit(self.tab_1)
        self.firstName_2.setGeometry(QtCore.QRect(800, 220, 191, 41))
        self.firstName_2.setObjectName("firstName_2")
        self.ch10 = QtWidgets.QCheckBox(self.tab_1)
        self.ch10.setGeometry(QtCore.QRect(1010, 270, 21, 41))
        self.ch10.setText("")
        self.ch10.setObjectName("ch10")
        self.ch11 = QtWidgets.QCheckBox(self.tab_1)
        self.ch11.setGeometry(QtCore.QRect(1010, 320, 21, 41))
        self.ch11.setText("")
        self.ch11.setObjectName("ch11")
        self.label_23 = QtWidgets.QLabel(self.tab_1)
        self.label_23.setGeometry(QtCore.QRect(680, 280, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.lastname_2 = QtWidgets.QTextEdit(self.tab_1)
        self.lastname_2.setGeometry(QtCore.QRect(800, 270, 191, 41))
        self.lastname_2.setObjectName("lastname_2")
        self.password = QtWidgets.QTextEdit(self.tab_1)
        self.password.setGeometry(QtCore.QRect(800, 320, 191, 41))
        self.password.setObjectName("password")
        self.AccountCreationWebhook = QtWidgets.QTextEdit(self.tab_1)
        self.AccountCreationWebhook.setGeometry(QtCore.QRect(800, 370, 191, 41))
        self.AccountCreationWebhook.setObjectName("Webhook")
        self.label_24 = QtWidgets.QLabel(self.tab_1)
        self.label_24.setGeometry(QtCore.QRect(680, 330, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_25")
        self.label_25 = QtWidgets.QLabel(self.tab_1)
        self.label_25.setGeometry(QtCore.QRect(680, 380, 111, 21))
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.tabwidget.addTab(self.tab_1, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.table2 = QtWidgets.QTableWidget(self.tab_2)
        self.table2.setGeometry(QtCore.QRect(5, 30, 461, 211))
        self.table2.setObjectName("table2")
        self.table2.setColumnCount(2)
        self.table2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(1, item)
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(180, 0, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setText("Accounts")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.paypalMethod = QtWidgets.QComboBox(self.tab_2)
        self.paypalMethod.setGeometry(QtCore.QRect(180, 280, 291, 31))
        self.paypalMethod.setObjectName("paypalMethod")
        self.paypalMethod.addItem("")
        self.paypalMethod.addItem("")
        self.country_tab2 = QtWidgets.QComboBox(self.tab_2)
        self.country_tab2.setGeometry(QtCore.QRect(690,280, 231, 31))
        self.country_tab2.setObjectName("country_tab2")
        self.country_tab2.addItem("")
        self.country_tab2.addItem("")
        self.country_tab2.addItem("")
        self.label_country_tab2 = QtWidgets.QLabel(self.tab_2)
        self.label_country_tab2.setGeometry(QtCore.QRect(510, 280, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_country_tab2.setFont(font)
        self.label_country_tab2.setObjectName("label_country_tab2")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(10, 280, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.paypalEmail = QtWidgets.QTextEdit(self.tab_2)
        self.paypalEmail.setGeometry(QtCore.QRect(180, 330, 231, 41))
        self.paypalEmail.setObjectName("paypalEmail")
        self.firstName = QtWidgets.QTextEdit(self.tab_2)
        self.firstName.setGeometry(QtCore.QRect(180, 380, 231, 41))
        self.firstName.setObjectName("firstName")
        self.AddressLine1 = QtWidgets.QTextEdit(self.tab_2)
        self.AddressLine1.setGeometry(QtCore.QRect(180, 430, 231, 41))
        self.AddressLine1.setObjectName("AddressLine1")
        self.postCode = QtWidgets.QTextEdit(self.tab_2)
        self.postCode.setGeometry(QtCore.QRect(180, 480, 231, 41))
        self.postCode.setObjectName("postCode")
        self.State = QtWidgets.QTextEdit(self.tab_2)
        self.State.setGeometry(QtCore.QRect(180, 530, 231, 41))
        self.State.setObjectName("State")
        self.lastName = QtWidgets.QTextEdit(self.tab_2)
        self.lastName.setGeometry(QtCore.QRect(690, 380, 231, 41))
        self.lastName.setObjectName("lastName")
        self.phone = QtWidgets.QTextEdit(self.tab_2)
        self.phone.setGeometry(QtCore.QRect(690, 330, 231, 41))
        self.phone.setObjectName("phone")
        self.formWebhook = QtWidgets.QTextEdit(self.tab_2)
        self.formWebhook.setGeometry(QtCore.QRect(690, 530, 231, 41))
        self.formWebhook.setObjectName("Webhook")
        self.city = QtWidgets.QTextEdit(self.tab_2)
        self.city.setGeometry(QtCore.QRect(690, 480, 231, 41))
        self.city.setObjectName("city")
        self.addressLine2 = QtWidgets.QTextEdit(self.tab_2)
        self.addressLine2.setGeometry(QtCore.QRect(690, 430, 231, 41))
        self.addressLine2.setObjectName("addressLine2")
        self.label_10 = QtWidgets.QLabel(self.tab_2)
        self.label_10.setGeometry(QtCore.QRect(10, 340, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.tab_2)
        self.label_11.setGeometry(QtCore.QRect(10, 390, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(10, 430, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setGeometry(QtCore.QRect(10, 490, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.tab_2)
        self.label_14.setGeometry(QtCore.QRect(10, 530, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.tab_2)
        self.label_15.setGeometry(QtCore.QRect(510, 390, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.tab_2)
        self.label_16.setGeometry(QtCore.QRect(510, 440, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.tab_2)
        self.label_17.setGeometry(QtCore.QRect(510, 490, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.tab_2)
        self.label_18.setGeometry(QtCore.QRect(510, 540, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.tab_2)
        self.label_19.setGeometry(QtCore.QRect(510, 340, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.ch1 = QtWidgets.QCheckBox(self.tab_2)
        self.ch1.setGeometry(QtCore.QRect(430, 380, 21, 41))
        self.ch1.setText("")
        self.ch1.setObjectName("ch1")
        self.ch2 = QtWidgets.QCheckBox(self.tab_2)
        self.ch2.setGeometry(QtCore.QRect(430, 430, 21, 41))
        self.ch2.setText("")
        self.ch2.setObjectName("ch2")
        self.ch3 = QtWidgets.QCheckBox(self.tab_2)
        self.ch3.setGeometry(QtCore.QRect(430, 480, 21, 41))
        self.ch3.setText("")
        self.ch3.setObjectName("ch3")
        self.ch4 = QtWidgets.QCheckBox(self.tab_2)
        self.ch4.setGeometry(QtCore.QRect(430, 530, 21, 41))
        self.ch4.setText("")
        self.ch4.setObjectName("ch4")
        self.ch5 = QtWidgets.QCheckBox(self.tab_2)
        self.ch5.setGeometry(QtCore.QRect(940, 390, 21, 31))
        self.ch5.setText("")
        self.ch5.setObjectName("ch5")
        self.ch6 = QtWidgets.QCheckBox(self.tab_2)
        self.ch6.setGeometry(QtCore.QRect(940, 430, 21, 41))
        self.ch6.setText("")
        self.ch6.setObjectName("ch6")
        self.ch7 = QtWidgets.QCheckBox(self.tab_2)
        self.ch7.setGeometry(QtCore.QRect(940, 480, 21, 41))
        self.ch7.setText("")
        self.ch7.setObjectName("ch7")
        self.ch8 = QtWidgets.QCheckBox(self.tab_2)
        self.ch8.setGeometry(QtCore.QRect(940, 330, 21, 41))
        self.ch8.setText("")
        self.ch8.setObjectName("ch8")
        self.insert_2 = QtWidgets.QPushButton(self.tab_2)
        self.insert_2.setGeometry(QtCore.QRect(490, 80, 111, 61))
        self.insert_2.setObjectName("insert_2")
        self.delete_3 = QtWidgets.QPushButton(self.tab_2)
        self.delete_3.setGeometry(QtCore.QRect(650, 80, 111, 61))
        self.delete_3.setObjectName("delete_3")
        self.load_2 = QtWidgets.QPushButton(self.tab_2)
        self.load_2.setGeometry(QtCore.QRect(810, 80, 111, 61))
        self.load_2.setObjectName("load_2")
        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(10, 250, 381, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.progressBar_2 = QtWidgets.QProgressBar(self.tab_2)
        self.progressBar_2.setGeometry(QtCore.QRect(640, 190, 131, 31))
        self.progressBar_2.setProperty("value", 0)
        self.progressBar_2.setObjectName("progressBar_2")
        self.label_20 = QtWidgets.QLabel(self.tab_2)
        self.label_20.setGeometry(QtCore.QRect(530, 190, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.submit2 = QtWidgets.QPushButton(self.tab_2)
        self.submit2.setGeometry(QtCore.QRect(430, 610, 151, 41))
        self.submit2.setDefault(True)
        self.submit2.setObjectName("submit2")
        self.tabwidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabwidget)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1074, 20))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        self.tabwidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "Fitbit"))
        item = self.table1.horizontalHeaderItem(0)
        item.setText(_translate("self", "Selected"))
        item = self.table1.horizontalHeaderItem(1)
        item.setText(_translate("self", "Emails"))
        self.country.setItemText(0, _translate("self", "Japan"))
        self.country.setItemText(1, _translate("self", "United Kingdom"))
        self.country.setItemText(2, _translate("self", "Korea"))
        self.insert.setText(_translate("self", "Insert"))
        self.delete_2.setText(_translate("self", "Delete"))
        self.load.setText(_translate("self", "Load"))
        self.label_21.setText(_translate("self", "Progress"))
        self.submit1.setText(_translate("self", "Submit"))
        self.label.setText(_translate("self", "Emails"))
        self.label_33.setText(_translate("self", "Country"))
        self.label_22.setText(_translate("self", "First Name"))
        self.label_23.setText(_translate("self", "Last Name"))
        self.label_24.setText(_translate("self", "Password"))
        self.label_country_tab2.setText(_translate("self", "Country"))
        self.label_25.setText(_translate("self", "Discord Webhook"))
        self.tabwidget.setTabText(self.tabwidget.indexOf(self.tab_1), _translate("self", "Create Fitbit Account"))
        item = self.table2.horizontalHeaderItem(0)
        item.setText(_translate("self", "Selected"))
        item = self.table2.horizontalHeaderItem(1)
        item.setText(_translate("self", "Emails"))
        self.paypalMethod.setItemText(0, _translate("self", "PayPal"))
        self.paypalMethod.setItemText(1, _translate("self", "Google eGifts"))
        self.country_tab2.setItemText(0, _translate("self", "Japan"))
        self.country_tab2.setItemText(1, _translate("self", "United Kingdom"))
        self.country_tab2.setItemText(2, _translate("self", "Canda"))
        self.label_3.setText(_translate("self", "Payment Method"))
        self.label_10.setText(_translate("self", "PayPal Email"))
        self.label_11.setText(_translate("self", "First Name"))
        self.label_12.setText(_translate("self", "Address Line 1"))
        self.label_13.setText(_translate("self", "Post code"))
        self.label_14.setText(_translate("self", "State"))
        self.label_15.setText(_translate("self", "Last name"))
        self.label_16.setText(_translate("self", "Address Line 2"))
        self.label_17.setText(_translate("self", "City"))
        self.label_18.setText(_translate("self", "Discord Webhook"))
        self.label_19.setText(_translate("self", "Phone"))
        self.insert_2.setText(_translate("self", "Insert"))
        self.delete_3.setText(_translate("self", "Delete"))
        self.load_2.setText(_translate("self", "Load"))
        self.label_4.setText(_translate("self", "Disabled Fields mean they are randomly generated"))
        self.label_20.setText(_translate("self", "Progress"))
        self.submit2.setText(_translate("self", "Submit"))
        self.tabwidget.setTabText(self.tabwidget.indexOf(self.tab_2), _translate("self", "Create Recall form"))
        self.table1.setColumnWidth(0, 100)
        self.table1.setColumnWidth(1, 335)
        self.table1.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.table2.setColumnWidth(0, 100)
        self.table2.setColumnWidth(1, 335)
        self.table2.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.UiComponents()
        self.load_data_to_table1()
        self.load_data_to_table2()
        self.data=Data()
        

    def UiComponents(self):
        self.insert.clicked.connect(partial(self.isInsert, self.table1))
        self.delete_2.clicked.connect(partial(self.delete_row, self.table1))
        self.load.clicked.connect(partial(self.browse_file, self.table1))
        self.insert_2.clicked.connect(partial(self.isInsert, self.table2))
        self.delete_3.clicked.connect(partial(self.delete_row, self.table2))
        self.load_2.clicked.connect(partial(self.browse_file, self.table2))
        self.paypalMethod.currentTextChanged.connect(self.current_text_changed)
        self.submit1.clicked.connect(self.submitButton1)
        self.submit2.clicked.connect(self.submitButton2)
        self.ch1.stateChanged.connect(self.isCheck)
        self.ch2.stateChanged.connect(self.isCheck)
        self.ch3.stateChanged.connect(self.isCheck)
        self.ch4.stateChanged.connect(self.isCheck)
        self.ch5.stateChanged.connect(self.isCheck)
        self.ch6.stateChanged.connect(self.isCheck)
        self.ch7.stateChanged.connect(self.isCheck)
        self.ch8.stateChanged.connect(self.isCheck)
        self.ch9.stateChanged.connect(self.isCheck)
        self.ch10.stateChanged.connect(self.isCheck)
        self.ch11.stateChanged.connect(self.isCheck)

    def current_text_changed(self):
        if(self.paypalMethod.currentText() == "Google eGifts"):
            self.paypalEmail.setDisabled(True)
        else:
            self.paypalEmail.setDisabled(False)

    def isCheck(self):
        self.firstName.setDisabled(self.ch1.isChecked())
        self.AddressLine1.setDisabled(self.ch2.isChecked())
        self.postCode.setDisabled(self.ch3.isChecked())
        self.State.setDisabled(self.ch4.isChecked())
        self.lastName.setDisabled(self.ch5.isChecked())
        self.addressLine2.setDisabled(self.ch6.isChecked())
        self.city.setDisabled(self.ch7.isChecked())
        self.phone.setDisabled(self.ch8.isChecked())
        self.firstName_2.setDisabled(self.ch9.isChecked())
        self.lastname_2.setDisabled(self.ch10.isChecked())
        self.password.setDisabled(self.ch11.isChecked())

    def delete_from_table2(self):
        rowCount = self.table2.rowCount()
        for index in range(rowCount-1,0,-1):
            if (self.table2.item(index, 0).checkState() == Qt.Checked):
                self.table2.removeRow(index)
        if(self.table2.item(0, 0).checkState() == Qt.Checked):
            self.table2.removeRow(0)
    
    def save_table1_data(self):
        try:
            os.remove('data_table1.json')
        except:
            pass
        try:
            table1_emails=[]
            for index in range (self.table1.rowCount()):
                table1_emails.append(self.table1.item(index,1).text())
            data_dict={"all_emails":table1_emails,"Discord_WebHook":self.AccountCreationWebhook.toPlainText()}
            with open("data_table1.json", "w") as file:
                json.dump(data_dict, file)
        except Exception as e:
            print(e)
            pass
            
    def save_table2_data(self):
        try:
            os.remove('data_table2.json')
        except:
            pass
        try:
            table2_emails=[]
            try:
                for index in range(self.table2.rowCount()-1,0,-1):
                    table2_emails.append(self.table2.item(index,1).text())
                table2_emails.append(self.table2.item(0,1).text())
            except:
                pass
            data_dict={"all_emails":table2_emails,"Discord_WebHook":self.formWebhook.toPlainText()}
            with open("data_table2.json", "w") as file:
                json.dump(data_dict, file)
        except Exception as e:
            print(e)
            pass

            

    def load_data_to_table1(self):
        try:
            with open("data_table1.json", "r") as file:
                data_dict = json.load(file)
            data_table1=data_dict["all_emails"]
            for mail in data_table1:
                self.Insert_from_load(self.table1,mail)
        except Exception as e:
            print(e)
            pass
        try:
            self.AccountCreationWebhook.setText(data_dict["Discord_WebHook"])
        except:
            pass
        
    def load_data_to_table2(self):
        try:
            with open("data_table2.json", "r") as file:
                 data_dict= json.load(file)
            data_table2=data_dict["all_emails"] 
            data_table2.reverse()
            for mail in data_table2:
                self.Insert_from_load(self.table2,mail)
        except Exception as e:
            print(e)
            pass
        try:
            self.formWebhook.setText(data_dict["Discord_WebHook"])
        except:
            pass
        
    
    def transferDataToTable2(self):
        rowCount = self.table1.rowCount()
        for index in range (self.table1.rowCount()):
            if(self.table1.item(index, 0).checkState() == Qt.Checked):
                check_box_item = QTableWidgetItem()
                check_box_item.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
                check_box_item.setCheckState(self.table1.item(index,0).checkState())
                rowPosition = self.table2.rowCount()
                self.table2.insertRow(rowPosition)
                self.table2.setItem(rowPosition, 0, check_box_item)
                self.table2.setItem(rowPosition, 1, QTableWidgetItem(self.table1.item(index,1).text()))
        for index in range(rowCount-1,0,-1):
            if (self.table1.item(index, 0).checkState() == Qt.Checked):
                self.table1.removeRow(index)
        if(self.table1.item(0, 0).checkState() == Qt.Checked):
            self.table1.removeRow(0)

    def isInsert(self, tableName):
        check_box_item = QTableWidgetItem()
        check_box_item.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
        check_box_item.setCheckState(Qt.CheckState.Unchecked)
        rowPosition = tableName.rowCount()
        tableName.insertRow(rowPosition)
        tableName.setItem(rowPosition, 0, check_box_item)
        
    def Insert_from_load(self, tableName,email):
        check_box_item = QTableWidgetItem()
        check_box_item.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
        check_box_item.setCheckState(Qt.CheckState.Unchecked)
        rowPosition = tableName.rowCount()
        tableName.insertRow(rowPosition)
        tableName.setItem(rowPosition, 0, check_box_item)
        tableName.setItem(rowPosition, 1, QTableWidgetItem(email))

    def isInsertJSON(self, tableName, email):
        check_box_item = QTableWidgetItem()
        check_box_item.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
        check_box_item.setCheckState(Qt.CheckState.Unchecked)
        rowPosition = tableName.rowCount()
        tableName.insertRow(rowPosition)
        tableName.setItem(rowPosition, 0, check_box_item)
        tableName.setItem(rowPosition, 1, QTableWidgetItem(email))

    def delete_row(self, tableName):
        indices = tableName.selectionModel().selectedRows()
        for index in sorted(indices):
            tableName.removeRow(index.row())

    def browse_file(self, tableName):
        fname = QFileDialog.getOpenFileName(None, 'Open file', 'D:',
                                            'Json (*.json)')
        f = open(fname[0])
        data = json.load(f)
        for val in data["all_emails"]:
            self.isInsertJSON(tableName, val)

    def set_progress1(self, value):
        self.progressBar_1.setValue(value)

    def set_progress2(self, value=0):
        self.progressBar_2.setValue(value)
    
    def start_thread1(self,table_1_data,email,password,first_name,last_name,year,centimeters,pounds,webhook,country):
        thread = FunctionThread(main_account_creation,email,password,first_name,last_name,year,centimeters,pounds,webhook,country)
        thread.finished.connect(partial(self.increment_var_progress2,table_1_data))
        self.threads.append(thread)
        thread.start()
        
    def start_thread2(self,table_2_data,first_name2,last_name2,address_line1,address_line2,postcode,city,state,email,payment_email,phone,address_to_search,formwebhook):
        thread = FunctionThread(main_fill_form,first_name2,last_name2,address_line1,address_line2,postcode,city,state,email,payment_email,phone,address_to_search,formwebhook)
        thread.finished.connect(partial(self.increment_var_progress2,table_2_data))
        self.threads.append(thread)
        thread.start()

    def increment_var_progress1(self,table_1_data):
        global x
        x+=1
        self.set_progress1(int(x/len(table_1_data))*100)
        
    def increment_var_progress2(self,table_2_data):
        global y
        y+=1
        self.set_progress2(int(x/len(table_2_data))*100)
    
    def closeEvent(self, event):
        self.save_table1_data()
        self.save_table2_data()
        for thread in self.threads:
            thread.quit()
            thread.wait()
        event.accept()
    
    def submitButton1(self):
        if( (self.password.toPlainText()== "" and not self.ch11.checkState() ) or (self.firstName_2.toPlainText() == "" and not self.ch9.checkState()) or (self.lastname_2.toPlainText() == "" and not self.ch10.checkState())):
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Please Enter your Password,First Name and Last Name or Disabled them")
            msgBox.setWindowTitle("Error Message")
            msgBox.exec_()
            return
        if(self.table1.rowCount()== 0):
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("There is no emails to Automate")
            msgBox.setWindowTitle("Error Message")
            msgBox.exec_()
            return
        self.set_progress1(0)
        self.data.country =self.country.currentText()
        self.data.table1_emails = []
        for val in range(self.table1.rowCount()):
            if (self.table1.item(val, 0).checkState() == Qt.Checked):
                self.data.table1_emails.append(self.table1.item(val, 1).text())
        # Automation process
        try:
            for email in self.data.table1_emails:
                # Generating Random Data if not Added
                if (self.ch9.checkState() and self.data.country =='Japan'):
                    self.data.first_name1=generate_Japanese_name()
                elif (self.ch9.checkState() and self.data.country =='United Kingdom'):
                    self.data.first_name1=generate_English_name()
                else:
                    self.data.first_name1 = self.firstName_2.toPlainText()
            
                if (self.ch10.checkState() and self.data.country =='Japan'):
                    self.data.last_name1=generate_Japanese_name()
                elif (self.ch10.checkState() and self.data.country =='United Kingdom'):
                    self.data.last_name1=generate_English_name()
                else:
                    self.data.last_name1 = self.lastname_2.toPlainText()
                if (self.ch11.checkState()):
                    self.data.password=generate_password()
                else:
                    self.data.password = self.password.toPlainText()
                
                
                self.start_thread1(self.data.table1_emails,email,self.data.password,self.data.first_name1,self.data.last_name1,generate_year_of_birth(),generate_centimeters(),generate_pounds(),self.AccountCreationWebhook.toPlainText(),self.country.currentText())
        except:
            pass
        self.transferDataToTable2()


    def submitButton2(self):
        if((self.paypalEmail.toPlainText() == ""  and self.paypalEmail.isEnabled()) or (self.firstName.toPlainText() == "" and not self.ch1.checkState()) or (self.AddressLine1.toPlainText() == "" and not self.ch2.checkState())
        or (self.postCode.toPlainText() == "" and not self.ch3.checkState()) or (self.State.toPlainText() == "" and not self.ch4.checkState()) or (self.lastName.toPlainText() == "" and not self.ch5.checkState()) or
                (self.addressLine2.toPlainText() == "" and not self.ch6.checkState())
                 or (self.city.toPlainText() == "" and not self.ch7.checkState())
                 or (self.phone.toPlainText() == "" and not self.ch8.checkState())
                 or (self.formWebhook.toPlainText() =="" and self.formWebhook.isEnabled())):
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Please Enter the rest of data or Disable them!")
            msgBox.setWindowTitle("Error Message")
            msgBox.exec_()
            return
        if(self.table2.rowCount()== 0):
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("There is no emails to Automate")
            msgBox.setWindowTitle("Error Message")
            msgBox.exec_()
            return
        self.data.table2_emails = []
        for val in range(self.table2.rowCount()):
            if (self.table2.item(val, 0).checkState() == Qt.Checked):
                self.data.table2_emails.append(self.table2.item(val, 1).text())
        #Generate random data if not stated
        for email in self.data.table2_emails:
            # Generating Random Data at first of each loop
            address_line_1,address_line_2,zip_code,city,prefecture=generate_japanese_address()
            #Generate Data in not Stated
            if (self.ch1.checkState()):
                        self.data.first_name2=generate_Japanese_name()
            else:
                    self.data.first_name2 = self.firstName_2.toPlainText()
            if (self.ch2.checkState()):
                        self.data.address_line1=address_line_1
            else:
                    self.data.address_line1 = self.AddressLine1.toPlainText()
            if (self.ch3.checkState()):
                        self.data.postcode=zip_code
            else:
                    self.data.postcode = self.postCode.toPlainText()
            if (self.ch4.checkState()):
                        self.data.state=prefecture
            else:
                    self.data.state = self.State.toPlainText()
            if (self.ch5.checkState()):
                        self.data.last_name2=generate_Japanese_name()
            else:
                    self.data.state = self.State.toPlainText()
            if (self.ch6.checkState()):
                        self.data.address_line2=address_line_2
            else:
                    self.data.address_line2 = self.addressLine2.toPlainText()
            if (self.ch7.checkState()):
                        self.data.city=city
            else:
                    self.data.city = self.city.toPlainText()
            if (self.ch8.checkState()):
                        self.data.phone=generate_japanese_phone_number()
            else:
                    self.data.phone = self.phone.toPlainText()
            self.data.payment_email=self.paypalEmail.toPlainText()
            self.start_thread2(self.data.table2_emails,self.data.first_name2,self.data.last_name2,self.data.address_line1,self.data.address_line2,str(self.data.postcode),self.data.city,self.data.state,email,self.data.payment_email,str(self.data.phone),self.data.address_line1,self.formWebhook.toPlainText())
            
        self.delete_from_table2()
       


if __name__ == "__main__":
    x,y=0,0
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window =Ui_MainWindow()
    window.setupUi()
    window.show()
    sys.exit(app.exec_())
